// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Primary
    Not(in=instruction[5], out=noti5);
    Not(in=instruction[4], out=noti4);
    Not(in=instruction[3], out=noti3);
    And(a=instruction[15], b=noti5, out=i15noti5);
    And(a=instruction[15], b=noti4, out=i15noti4);
    And(a=instruction[15], b=noti3, out=i15noti3);
    Not(in=i15noti5, out=writeA);
    Not(in=i15noti4, out=writeD);
    Not(in=i15noti3, out=writeM);

    Mux16(a=instruction, b=outm, sel=instruction[15], out=a0);

    ARegister(in=a0, load=writeA, out[0..14]=addressM, out=outa);
    Mux16(a=outa, b=inM, sel=instruction[12], out=outAorM);

    DRegister(in=outm, load=writeD, out=outD);
    
    And(a=instruction[15], b=instruction[11], out=zx);
    And(a=instruction[15], b=instruction[10], out=nx);
    And(a=instruction[15], b=instruction[9], out=zy);
    And(a=instruction[15], b=instruction[8], out=ny);
    And(a=instruction[15], b=instruction[7], out=f);
    And(a=instruction[15], b=instruction[6], out=no);
    ALU(x=outAorM, y=outD, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outm, out=outM, zr=zr, ng=ng);

    
    //Processed load bits for program counter
    Not(in=instruction[2], out=not1);
    Not(in=instruction[1], out=not2);
    Not(in=instruction[0], out=not3);
    And(a=instruction[15], b=not1, out=i15notj1);
    And(a=instruction[15], b=not2, out=i15notj2);
    And(a=instruction[15], b=not3, out=i15notj3);
    Not(in=i15notj1, out=j1);
    Not(in=i15notj2, out=j2);
    Not(in=i15notj3, out=j3);

    //the below five lines resolves inc load bit which is only one when all load bits are zero.
    Nand(a=j1, b=j2, out=inc0);
    Nand(a=inc0, b=j3, out=inc);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    
    And(a=ng, b=j1, out=load1);
    And(a=zr, b=j2, out=load2);
    And(a=notzr, b=notng, out=notzrnotng);
    And(a=notzrnotng, b=j3, out=load3);
    Or(a=load1, b=load2, out=load4);
    Or(a=load4, b=load3, out=load);

    PC(in=outa,   inc=inc, load=load, out=PC);

}