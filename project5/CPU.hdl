// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //split instruction into two wires depending on whether the instruction is a or c based on 
    //the most significant bit.
    DMux16(in=instruction, sel=instruction[15], a=aI, b=cI);

    //selects between the output of the ALU outm (yet to be defined) and the aI. The reasoning is
    //when it is an aI, cI[15], what we want to pass into the A-Register is the incoming  value as 
    //an address, that is aI. when cI[15] is 1 then it is a C instruction so if any value is going to 
    //be stored in the A-Register it could only be the output of the ALU.
    Mux16(a=aI, b=outm, sel=instruction[15], out=a0);

    //Since we want to load the incoming value into the A-Register whenever the instruction is an aI,
    //but load Instruction only when the destination bit at i[5] is 1, we use Instruction[5] as the load bit. It will 
    //always be zero when the instruction is an aI, but if it is a Instruction[5], then the value at Instruction can either 
    //be 0 or 1, hence will only load into the A-Register when this bit is 1.
    //the output is defined as outa which is the output at the A-Register.
    ARegister(in=a0, load=instruction[5], out[0..14]=addressM, out=outa);

    //the Mux16 below selects between the incoming value at the currently selected memory inM and the
    //output of the A-Register as one of the values fed into the ALU
    Mux16(a=inM, b=outa, sel=instruction[12], out=outAorM);

    //the bit at instruction[4] is also one of the destination bits. Here it determines whether the output of 
    //ALU outm is stored in the D-Register to be fed into the ALU for the next time cycle.
    DRegister(in=outm, load=instruction[4], out=outD);
    
    //the ALU takes in the outputs at the AorM mux and the D register and perform manipulations on
    //them based on the control bits of the instruction[6..11], it outputs finally outm which is not to be 
    //confused with outM. outM is the final result, while outm is fed back into previously seen CHIPs
    //as an input.
    //zr and ng are used in determining load bits for the program counter.
    ALU(x=outAorM, y=outD, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=outm, out=outM, zr=zr, ng=ng);
    
    //this simply outputs of of the instruction bits into the memory and it will determine whether the output
    //of the ALU gets saved in the Memory
    And(a=instruction[3], b=true, out=writeM);
    
    //Processed load bits for program counter

    //the below five lines resolves inc load bit which is only one when all load bits are zero.
    Not(in=instruction[2], out=j1);
    Not(in=instruction[1], out=j2);
    Not(in=instruction[0], out=j3);
    And(a=j1, b=j2, out=inc0);
    And(a=inc0, b=j3, out=inc);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    
    And(a=zr, b=instruction[1], out=load1);
    And(a=ng, b=instruction[2], out=load2);
    And(a=notzr, b=notng, out=notzrnotng);
    And(a=notzrnotng, b=instruction[0], out=load3);
    Or(a=load1, b=load2, out=load4);
    Or(a=load4, b=load3, out=load);

    PC(in=outa, reset=reset, inc=inc, load=load, out=PC);

}