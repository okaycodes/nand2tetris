// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /**
    *DMux16 selects between two pathways for incoming value to follow based on the most 
    *address bit(first bit from the left). This relies on the principle (thought really)
    *that a all values in n-bit in binary are divided into two equal parts based on the 
    *whether the value of the most significant bit is 0 or 1. if it is 0 the value is less 
    *than half of all possible values, else it's greater than half of all possible values. 
    *This basic principle is exploited over and over again as the input moves throw 16kRAM 
    *down through 4KRAM, 512RAM ... 8RAM.
    *The load bit is also processed in a similar manner.
    */
    DMux16(in=in, sel=address[14], a=a, b=b);
    DMux(in=load, sel=address[14], a=loada, b=loadb);
    
    //value in first pathway is loaded into the 16K base memory
    RAM16K(in=a, address=address[0..13], load=loada, out=x);

    /**
    *value in second is split into two pathways just like (in) was initially and the same
    *way as the initial value.
    */
    DMux16(in=b, sel=address[13], a=u1, b=u2);
    DMux(in=loadb, sel=address[13], a=loadb1, b=loadb2);

    //u1 is passed in to the 8KRAM Screen Chip and u2 is unused
    Screen(in=u1, address=address[0..12], load=loadb1, out=v1);
    Keyboard(out=v2);
    //both mux16s selects a final output of the chip based on this most significant bit.
    Mux16(a=v1, b=v2, sel=address[13], out=y);
    Mux16(a=x, b=y, sel=address[14], out=out);
}