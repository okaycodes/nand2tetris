// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux16(in=in, sel=address[14], a=a, b=b);
    DMux16(in=load, sel=address[14], a=loada, b=loadb);

    RAM16K(in=a, address=address[0..13], load=loada out=x);

    DMux4Way16(in=b, sel=address[12..13], a=u1, b=u2, c=u3, d=u4);
    DMux4Way16(in=loadb, sel=address[12..13], a=loadb1, b=loadb2, c=loadb3, d=loadb4);
    RAM4K(in=u1, address=adress[0..11], load=loadb1 out=v1);
    RAM4K(in=u2, address=adress[0..11], load=loadb2, out=v2);
    Register(in=u3, load=b3, out=v3);
    Mux4Way16(a=v1, b=v2, c=v3, d=false, sel=address[12..13], out=y);
    Mux16(a=x, b=y, sel=address[14], out=out);
}