// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    //1. DMux8Way sends the incoming 16-bit towards the needed address and sends 0 everywhere else
    DMux8Way16(in=in, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    //2. DMux8Way sends the incoming load-bit value to the same ram address and sends 0 everywhere else
    DMux8Way(in=load, sel=address, a=loadav, b=loadbv, c=loadcv, d=loaddv, e=loadev, f=loadfv, g=loadgv, h=loadhv);
    
    //3. At individual register a new value is registered if the incoming load-bit is 1.
    //3b. If the incoming load-bit is zero, as will be the case for 7 or all 8 addresses...
    //the value at the address is left unchanged
    Register(in=a, load=loadav, out=outa);
    Register(in=b, load=loadbv, out=outb);
    Register(in=c, load=loadcv, out=outc);
    Register(in=d, load=loaddv, out=outd);
    Register(in=e, load=loadev, out=oute);
    Register(in=f, load=loadfv, out=outf);
    Register(in=g, load=loadgv, out=outg);
    Register(in=h, load=loadhv, out=outh);
    
    //Mux8Way16 selects and outputs the current/previous (and not incoming/just loaded) bit at the address
    Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address, out=out);

}